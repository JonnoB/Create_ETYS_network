#convert network to matrix
ecount(gCasc) #just to check there are less edges, can be deleted later
#After the next node has been deleted the network is analysed and all over capacity lines are removed
#need to add in if steatement for networks with weights
MatCasc <- as_adjacency_matrix(gCasc, attr = "weight") #is this necessary any more?
#Why is this longer than the original? is it because of multi links?
ImpedanceCasc<- as_tibble(get.edgelist(gCasc)) %>%
mutate(Y = edge_attr(gCasc, "weight")) %>%
rename(Bus.1 = V1, Bus.2 = V2)
V(gCasc)
componentmatcher <- data_frame(Bus.Name = names(components(gCasc)$membership),
component = components(gCasc)$membership)
#checks that only inlcuded nodes are being counted
ValidNodesCasc <- trans1 %>%
filter(Bus.Name %in% c(ImpedanceCasc$Bus.1, ImpedanceCasc$Bus.2))
#includes Componant information for power balancing
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
BusTransferB2 = Demand2+Generation.B2,
Demand3 = case_when(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.) ~
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)),
TRUE ~ .$Demand                )
)
#includes Componant information for power balancing
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
BusTransferB2 = Demand2+Generation.B2
)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.)
) %>%
ungroup %>%
mutate(BusTransferB2 = Demand2+Generation.B2)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = case_when(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.) ~
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)),
TRUE ~ Demand                )
)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1)
)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1)
)
test$Demand3
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1),
Demand2 = Demand*Demand3
)
#includes Componant information for power balancing
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1),
Demand2 = Demand*Demand3
) %>%
select(Bus.Name, Demand2:Demand3)
#includes Componant information for power balancing
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1),
Demand2 = Demand*Demand3
) %>%
select(Bus.Name, component, Demand2:Demand3)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1),
Demand2 = Demand*Demand3
) %>%
select(Bus.Name, component, Demand2:Demand3)
View(test)
#includes Componant information for power balancing
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1),
Demand4 = Demand*Demand3
) %>%
select(Bus.Name, component, Demand2:Demand4)
?if_else
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = if_else(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1),
Demand4 = Demand*Demand3
) %>%
select(Bus.Name, component, Demand2:Demand4)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = if_else(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1),
Demand4 = Demand*Demand3,
Demand3 = case_when(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.) ~
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)),
TRUE ~ Demand                ),
) %>%
select(Bus.Name, component, Demand2:Demand4)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(Demand2 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1),
Demand4 = Demand*Demand3,
Demand3 = case_when(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.) ~
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)),
TRUE ~ Demand                ),
)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand2 = ifelse(GenBal,
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(sum(Generation.B.....Year.Round...Transport.Model.)<sum(Demand),
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
Demand3 = ifelse(sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand), 1),
Demand4 = Demand*Demand3
)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand2 = ifelse(GenBal,
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(GenBal,
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
BusTransferB = Demand2 + Generation.B2
)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
BusTransferB = ifelse(DeadIsland, 0, BusTransferB)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand)>sum(Generation.B.....Year.Round...Transport.Model.),
Demand2 = ifelse(GenBal,
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(GenBal,
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
BusTransferB = Demand2 + Generation.B2
)
View(test)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = ifelse(DeadIsland, 0, Generation.B2)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand2)>sum(Generation.B2),
Demand2 = ifelse(GenBal,
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(GenBal,
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
BusTransferB = Demand2 + Generation.B2
)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = ifelse(DeadIsland, 0, Generation.B2))
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = ifelse(DeadIsland, 0, Generation.B.....Year.Round...Transport.Model.)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand2)>sum(Generation.B2),
Demand2 = ifelse(GenBal,
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(GenBal,
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
BusTransferB = Demand2 + Generation.B2
)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = if_else(DeadIsland, 0, Generation.B.....Year.Round...Transport.Model.)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand2)>sum(Generation.B2),
Demand2 = ifelse(GenBal,
Demand*(sum(Generation.B.....Year.Round...Transport.Model.)/sum(Demand)), Demand),
Generation.B2 = ifelse(GenBal,
Generation.B.....Year.Round...Transport.Model.*(sum(Demand)/sum(Generation.B.....Year.Round...Transport.Model.)), Generation.B.....Year.Round...Transport.Model.),
BusTransferB = Demand2 + Generation.B2
)
View(test)
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = if_else(DeadIsland, 0, Generation.B.....Year.Round...Transport.Model.))
test <- ValidNodesCasc %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = if_else(DeadIsland, 0, Generation.B.....Year.Round...Transport.Model.)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand2)>sum(Generation.B2),
Demand2 = ifelse(GenBal,
Demand2*(sum(Generation.B2)/sum(Demand2)), Demand2),
Generation.B2 = ifelse(GenBal,
Generation.B2*(sum(Demand2)/sum(Generation.B2)), Generation.B2),
BusTransferB = Demand2 + Generation.B2
)
ValidnodesFunc <-function(trans1, Impedance){
#This function takes in the trans1 data frame and the impedance dataframe and outputs a dataframe of nodes to be included
#in the power flow calculations
ValidNodesCasc <- trans1 %>%
filter(Bus.Name %in% c(Impedance$Bus.1, Impedance$Bus.2))
}
ValidNodesFunc <-function(trans1, Impedance){
#This function takes in the trans1 data frame and the impedance dataframe and outputs a dataframe of nodes to be included
#in the power flow calculations
ValidNodesCasc <- trans1 %>%
filter(Bus.Name %in% c(Impedance$Bus.1, Impedance$Bus.2))
}
ValidNodesCasc <- ValidNodesFunc(trans1, Impedance)
View(BalencedGenDem)
BalencedGenDem2 <- function(g, ValidNodes){
#Balences the generation and demand across multiple isolated componants
#g: the graph of the network that is being attacked
#ValidNodes: the data frame of valid nodes and there demand and generation
componentmatcher <- data_frame(Bus.Name = names(components(g)$membership),
component = components(g)$membership)
ValidNodesCasc <- ValidNodes %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = if_else(DeadIsland, 0, Generation.B.....Year.Round...Transport.Model.)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand2)>sum(Generation.B2),
Demand2 = ifelse(GenBal,
Demand2*(sum(Generation.B2)/sum(Demand2)), Demand2),
Generation.B2 = ifelse(GenBal,
Generation.B2*(sum(Demand2)/sum(Generation.B2)), Generation.B2),
BusTransferB = Demand2 + Generation.B2
}
ValidNodesCasc <- ValidNodes %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = if_else(DeadIsland, 0, Generation.B.....Year.Round...Transport.Model.)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand2)>sum(Generation.B2),
Demand2 = ifelse(GenBal,
Demand2*(sum(Generation.B2)/sum(Demand2)), Demand2),
Generation.B2 = ifelse(GenBal,
Generation.B2*(sum(Demand2)/sum(Generation.B2)), Generation.B2),
BusTransferB = Demand2 + Generation.B2
BalencedGenDem2 <- function(g, ValidNodes){
#Balences the generation and demand across multiple isolated componants
#g: the graph of the network that is being attacked
#ValidNodes: the data frame of valid nodes and there demand and generation
componentmatcher <- data_frame(Bus.Name = names(components(g)$membership),
component = components(g)$membership)
ValidNodesCasc <- ValidNodes %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = if_else(DeadIsland, 0, Generation.B.....Year.Round...Transport.Model.)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand2)>sum(Generation.B2),
Demand2 = ifelse(GenBal,
Demand2*(sum(Generation.B2)/sum(Demand2)), Demand2),
Generation.B2 = ifelse(GenBal,
Generation.B2*(sum(Demand2)/sum(Generation.B2)), Generation.B2),
BusTransferB = Demand2 + Generation.B2)
}
test<- BalencedGenDem2(gCasc, ValidNodesCasc)
View(test)
ValidNodesCasc <- ValidNodesFunc(trans1, Impedance) %>%
BalencedGenDem2(gCasc, .)
View(ImpedanceCasc)
ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland]
ImpedanceCasc %>%
filter(ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland] %in% Bus.1 )
ImpedanceCasc %>%
filter(Bus.1 %in% ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland] )
DeadIslandNodes <-ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland]
ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ImpedanceCasc2 <- ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ValidNodesCasc2 <- ValidNodesCasc %>%
filter(!DeadIsland)
ImpedanceCasc <- ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ValidNodesCasc <- ValidNodesCasc %>%
filter(!DeadIsland)
SlackRefCasc<- which(ValidNodesCasc$Bus.Order == 0)
SlackRefCasc
which.min(ValidNodesCasc$Bus.Order)
SlackRefCasc <- which.min(ValidNodesCasc$Bus.Order)
PowerFlowMat <- PowerFlow(ImpedanceCasc, ValidNodesCasc, SlackRefCasc)
PowerFlowMat <- PowerFlow(ImpedanceCasc, ValidNodesCasc, SlackRefCasc)
ImpedanceCasc
ValidNodesCasc
SlackRefCasc
ImpedanceCasc
View(ImpedanceCasc)
View(ImpedanceCasc2)
Impedance
Impedance
#Why is this longer than the original? is it because of multi links?
ImpedanceCasc<- as_tibble(get.edgelist(gCasc)) %>%
mutate(w = edge_attr(gCasc, "weight")) %>%
rename(Bus.1 = V1, Bus.2 = V2) %>%
left_join(., Impedance)
View(ImpedanceCasc)
#Why is this longer than the original? is it because of multi links?
ImpedanceCasc<- as_tibble(get.edgelist(gCasc)) %>%
mutate(w = edge_attr(gCasc, "weight")) %>%
rename(Bus.1 = V1, Bus.2 = V2) #%>%
#they arethe same length until you join them together then they become much longer.. why?
#left_join(., Impedance)
gCasc <-  Impedance %>%
rename(weight = Y) %>%
graph.data.frame(., directed=FALSE)
#node to delete rule
set.seed(193) #makes testing reproducible
deletevertex <- sample(V(gCasc)$name, 1)
#remove selected node from network
gCasc <- delete.vertices(gCasc, deletevertex)
#maintains graph structure but with edges associtated with the node removed.
gCasc <- add_vertices(gCasc, 1, name = deletevertex)
#convert network to matrix
ecount(gCasc) #just to check there are less edges, can be deleted later
#After the next node has been deleted the network is analysed and all over capacity lines are removed
#need to add in if steatement for networks with weights
MatCasc <- as_adjacency_matrix(gCasc, attr = "weight") #is this necessary any more?
ImpedanceCasc<- as_tibble(get.edgelist(gCasc)) %>%
mutate(w = edge_attr(gCasc, "weight")) %>%
rename(Bus.1 = V1, Bus.2 = V2) #%>%
View(ImpedanceCasc)
ImpedanceCasc<- as_tibble(get.edgelist(gCasc)) %>%
mutate(Y = edge_attr(gCasc, "weight")) %>%
rename(Bus.1 = V1, Bus.2 = V2) #%>%
#they arethe same length until you join them together then they become much longer.. why?
#left_join(., Impedance)
V(gCasc)
ValidNodesCasc <- ValidNodesFunc(trans1, Impedance) %>%
BalencedGenDem2(gCasc, .)
DeadIslandNodes <-ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland]
ImpedanceCasc <- ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ValidNodesCasc <- ValidNodesCasc %>%
filter(!DeadIsland)
SlackRefCasc <- which.min(ValidNodesCasc$Bus.Order)
PowerFlowMat <- PowerFlow(ImpedanceCasc, ValidNodesCasc, SlackRefCasc)
