ImpedanceCasc <- ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ValidNodesCasc <- ValidNodesCasc %>%
filter(!DeadIsland)
#finds the slack reference in each component
#Only components that are greater than 1 node need to be included as all 1 node components
#can never exceed there line limit as not lines are used.
SlackRefCasc <- ValidNodesCasc %>%
group_by(component) %>%
arrange(Bus.Order) %>%
summarise(Bus.Name = first(Bus.Name),
Nodes = n()) %>%
filter(Nodes>1)
#Add on the componant information for the nodes in the Impedance edge list, this allows the power flow to be calculated
#by component
ImpedanceCasc <- ImpedanceCasc %>%
left_join(componentmatcher, by = c("Bus.1"="Bus.Name"))
#Calculate power flow for each component of the network as seperate networks
PowerFlowMat <- 1:nrow(SlackRefCasc) %>%
map_df(~{
print(paste("PowerFlow for componant", .x, "of Iteration", Iteration))
ImpedanceMap <- ImpedanceCasc %>%
filter(component == SlackRefCasc$component[.x]) %>%
select(-component)
ValidNodesMap <- ValidNodesCasc %>%
filter(component == SlackRefCasc$component[.x])
PowerFlow(ImpedanceMap, ValidNodesMap, SlackRefCasc[.x,])
})
#Join up Power flow with line limit data to know which lines are overlimit and will be shut down
PowerFlowMat2 <- EdgeData %>%
select( Link, Link.Limit, Link.Type, LineFlow__1 )%>%
left_join(PowerFlowMat, ., by = "Link") %>%
mutate(Over.Limit = abs(MW)>Link.Limit,
Over.Limitx1.5 = abs(MW)>(Link.Limit*1.5)) %>%
mutate(MW = round(MW),
LineFlow__1= round(LineFlow__1),
ratio = MW/LineFlow__1,
diff  = MW-LineFlow__1,
absdiff = abs(diff))
#These links are stil safe and can be kept and turn the new Impedance edge matrix back into a graph
#Using the valid nodes
g2 <- PowerFlowMat2 %>%
filter(!Over.Limit) %>%
select(Link) %>%
left_join(ImpedanceCasc, by = "Link") %>%
select(-Link, -component) %>%
graph_from_data_frame(., directed=FALSE, vertices=select(ValidNodesCasc, Bus.Name))
#checks the initial network and the final network are equal.
#If they are not equal then a vector of each element of the graph object is returned, showing which
#parts are equal and which are not. If the vector is longer than 1 then it they are not equal
#If the list is only 1 long and is FALSE then it is also FALSE
edgesequal <- all_equal(get.edgelist(g), get.edgelist(g2))
CascadeContinues <- !((edgesequal==TRUE)[1] & length(edgesequal)==1)
if(CascadeContinues){
Cascade(g2, SubstationData, EdgeData, Iteration)
}
#If no more edges have been removed remove any dead islands and return the reduced graph
return(g2)
}
test <- Cascade(gCasc, trans1, trans2)
Cascade <- function(g, SubstationData, EdgeData, Iteration = 0){
#This Function iterates through the network removing edges until there are no further overpower edges to remove
#This function takes a weighted edge list, the substation data on demand and generation as well as the current network
#This function uses the Bus order to choose the slack reference should this be changed?
#It returns the a weighted Edge list of the remaining valid edges.
#g: a weighted graph where the edges are the impedance
#SubstationData: a dataframe containin Node name, generation and demand.
#EdgeData: A dataframe containing Bus.1 and Bus.2 as well as Link limit
#Iteration: the number of iteration number of the cascade, used to keep track of what is going on
Iteration <- Iteration + 1
print(paste("Iteration number", Iteration))
#Create the edge list from the graph object
ImpedanceCasc <- as_data_frame(g) %>%
rename(Bus.1 = from, Bus.2 = to) %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup %>%
mutate(Y = round(Y,7)) %>%
select(Bus.1, Bus.2, Link, Y) %>%
arrange(Link)
#checks that only inlcuded nodes are being counted removes nodes that shouldn't be there.
#Using the graph vertex name instead of the edge list means that isolated nodes are included as their own component.
ValidNodesCasc <- SubstationData %>%
filter(Bus.Name %in% V(g)$name)
#matches each node to it's network componan
componentmatcher <- data_frame(Bus.Name = names(components(g)$membership),
component = components(g)$membership)
#adds componants to the valid node data frame so that each section can be individually balanced
ValidNodesCasc <-ValidNodesCasc %>% left_join(componentmatcher, by = "Bus.Name")
#Identify DeadIslands and balences load
ValidNodesCasc <-  BalencedGenDem2(g,
ValidNodesCasc,
Demand, Generation.B.....Year.Round...Transport.Model.,
"BusTransferB")
#Remove dead islands
DeadIslandNodes <- ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland]
ImpedanceCasc <- ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ValidNodesCasc <- ValidNodesCasc %>%
filter(!DeadIsland)
#finds the slack reference in each component
#Only components that are greater than 1 node need to be included as all 1 node components
#can never exceed there line limit as not lines are used.
SlackRefCasc <- ValidNodesCasc %>%
group_by(component) %>%
arrange(Bus.Order) %>%
summarise(Bus.Name = first(Bus.Name),
Nodes = n()) %>%
filter(Nodes>1)
#Add on the componant information for the nodes in the Impedance edge list, this allows the power flow to be calculated
#by component
ImpedanceCasc <- ImpedanceCasc %>%
left_join(componentmatcher, by = c("Bus.1"="Bus.Name"))
#Calculate power flow for each component of the network as seperate networks
PowerFlowMat <- 1:nrow(SlackRefCasc) %>%
map_df(~{
print(paste("PowerFlow for componant", .x, "of Iteration", Iteration))
ImpedanceMap <- ImpedanceCasc %>%
filter(component == SlackRefCasc$component[.x]) %>%
select(-component)
ValidNodesMap <- ValidNodesCasc %>%
filter(component == SlackRefCasc$component[.x])
PowerFlow(ImpedanceMap, ValidNodesMap, SlackRefCasc[.x,])
})
#Join up Power flow with line limit data to know which lines are overlimit and will be shut down
PowerFlowMat2 <- EdgeData %>%
select( Link, Link.Limit, Link.Type, LineFlow__1 )%>%
left_join(PowerFlowMat, ., by = "Link") %>%
mutate(Over.Limit = abs(MW)>Link.Limit,
Over.Limitx1.5 = abs(MW)>(Link.Limit*1.5)) %>%
mutate(MW = round(MW),
LineFlow__1= round(LineFlow__1),
ratio = MW/LineFlow__1,
diff  = MW-LineFlow__1,
absdiff = abs(diff))
#These links are stil safe and can be kept and turn the new Impedance edge matrix back into a graph
#Using the valid nodes
g2 <- PowerFlowMat2 %>%
filter(!Over.Limit) %>%
select(Link) %>%
left_join(ImpedanceCasc, by = "Link") %>%
select(-Link, -component) %>%
graph_from_data_frame(., directed=FALSE, vertices=select(ValidNodesCasc, Bus.Name))
#checks the initial network and the final network are equal.
#If they are not equal then a vector of each element of the graph object is returned, showing which
#parts are equal and which are not. If the vector is longer than 1 then it they are not equal
#If the list is only 1 long and is FALSE then it is also FALSE
edgesequal <- all_equal(get.edgelist(g), get.edgelist(g2))
CascadeContinues <- !((edgesequal==TRUE)[1] & length(edgesequal)==1)
if(CascadeContinues){
g2 <- Cascade(g2, SubstationData, EdgeData, Iteration)
}
#If no more edges have been removed remove any dead islands and return the reduced graph
return(g2)
}
test <- Cascade(gCasc, trans1, trans2)
test %>%
simplify(., remove.multiple = T, remove.loops = T) %>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA)
g <- test
#Create the edge list from the graph object
ImpedanceCasc <- as_data_frame(g) %>%
rename(Bus.1 = from, Bus.2 = to) %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup %>%
mutate(Y = round(Y,7)) %>%
select(Bus.1, Bus.2, Link, Y) %>%
arrange(Link)
#checks that only inlcuded nodes are being counted removes nodes that shouldn't be there.
#Using the graph vertex name instead of the edge list means that isolated nodes are included as their own component.
ValidNodesCasc <- SubstationData %>%
filter(Bus.Name %in% V(g)$name)
#matches each node to it's network componan
componentmatcher <- data_frame(Bus.Name = names(components(g)$membership),
component = components(g)$membership)
#adds componants to the valid node data frame so that each section can be individually balanced
ValidNodesCasc <-ValidNodesCasc %>% left_join(componentmatcher, by = "Bus.Name")
#Identify DeadIslands and balences load
ValidNodesCasc <-  BalencedGenDem2(g,
ValidNodesCasc,
Demand, Generation.B.....Year.Round...Transport.Model.,
"BusTransferB")
#Remove dead islands
DeadIslandNodes <- ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland]
ImpedanceCasc <- ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ValidNodesCasc <- ValidNodesCasc %>%
filter(!DeadIsland)
#finds the slack reference in each component
#Only components that are greater than 1 node need to be included as all 1 node components
#can never exceed there line limit as not lines are used.
SlackRefCasc <- ValidNodesCasc %>%
group_by(component) %>%
arrange(Bus.Order) %>%
summarise(Bus.Name = first(Bus.Name),
Nodes = n()) %>%
filter(Nodes>1)
#Add on the componant information for the nodes in the Impedance edge list, this allows the power flow to be calculated
#by component
ImpedanceCasc <- ImpedanceCasc %>%
left_join(componentmatcher, by = c("Bus.1"="Bus.Name"))
#Calculate power flow for each component of the network as seperate networks
PowerFlowMat <- 1:nrow(SlackRefCasc) %>%
map_df(~{
print(paste("PowerFlow for componant", .x, "of Iteration", Iteration))
ImpedanceMap <- ImpedanceCasc %>%
filter(component == SlackRefCasc$component[.x]) %>%
select(-component)
ValidNodesMap <- ValidNodesCasc %>%
filter(component == SlackRefCasc$component[.x])
PowerFlow(ImpedanceMap, ValidNodesMap, SlackRefCasc[.x,])
})
#Join up Power flow with line limit data to know which lines are overlimit and will be shut down
PowerFlowMat2 <- EdgeData %>%
select( Link, Link.Limit, Link.Type, LineFlow__1 )%>%
left_join(PowerFlowMat, ., by = "Link") %>%
mutate(Over.Limit = abs(MW)>Link.Limit,
Over.Limitx1.5 = abs(MW)>(Link.Limit*1.5)) %>%
mutate(MW = round(MW),
LineFlow__1= round(LineFlow__1),
ratio = MW/LineFlow__1,
diff  = MW-LineFlow__1,
absdiff = abs(diff))
test <- Cascade(gbase, trans1, trans2)
(max(components(gcasc)$csize)/vcount(gcasc)) > 0.8
(max(components(test)$csize)/vcount(gbase))
max(components(test)$csize)
vcount(gbase)
(max(components(test)$csize)/vcount(gbase)) > 0.8
sample(V(gCasc)$name, 1)
deletevertex <- sample(V(gCasc)$name, 1)
NodeDeleteFunction <- quo(sample(V(gCasc)$name, 1))
NodeDeleteFunction
!!NodeDeleteFunction
call(NodeDeleteFunction)
eval(NodeDeleteFunction)
eval_tidy(NodeDeleteFunction)
quo <- quo(letters)
quo <- quo(toupper(!! quo))
quo
eval_tidy(quo)
install.packages("rlang")
install.packages("rlang")
library(rlang)
quo <- quo(letters)
quo <- quo(toupper(!! quo))
quo
eval_tidy(quo)
setwd("/home/jonno/Create_ETYS_network/SubCode")
source("Setup.R")
```
#Load Tariff and Trasnport
```{r}
KeepPath <- getwd()
#Load Tariff aka generation data
setwd(Tariff)
GenerationData <- read_excel("Tariff & Transport Model_2018_19 Tariffs_External.xlsm", sheet =10, skip = 33) %>%
setNames(make.names(names(.))) %>%
mutate(Site = str_sub(Node.1,1,4))
LocalAssetData <- read_excel("Tariff & Transport Model_2018_19 Tariffs_External.xlsm", sheet =11, skip = 11) %>%
setNames(make.names(names(.)))
TransportData <- read_excel("Tariff & Transport Model_2018_19 Tariffs_External.xlsm", sheet =12, skip = 11) %>%
setNames(make.names(names(.)))
setwd(KeepPath)
rm(KeepPath)
```
#Clean and seperate Transport
```{r}
trans1 <-TransportData[,1:16] %>%
filter(!is.na(Bus.ID))
trans2 <- TransportData[,17:59] %>%
filter(!is.na(Bus.1)) %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup  %>%
#set construct line limits really high
mutate(Link.Type = tolower(Link.Type),
Link.Limit = ifelse(Link.Type == "construct", 1e5, Link.Limit))
```
```{r}
NodeGraph <-trans2 %>%
mutate(Node1 = Bus.1,
Node2 = Bus.2) %>%
select(Node1, Node2) %>%
as.matrix() %>%
graph_from_edgelist(., directed = FALSE)
NodeGraph %>%
simplify(., remove.multiple = T, remove.loops = T) %>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA)
length(V(SubStatGraph2))
```
#Injection Vector
```{r}
InjectionVector <- trans1 %>% arrange(Bus.Name) %>% .$BusTransferB
```
#Create Impedance and Transmission matrix
parallel susceptances are added together. does this mean that when there are multiple lines connecting two nodes they should be added together and have the total capacity added together or should they be help seperate?
the removing of parallel cables may be causing some of the over capacity lines
```{r}
Impedance <- trans2 %>%
mutate(Y = 1/X..Peak.Security.) %>%
select(Bus.1, Bus.2, Y, Link)
gbase <- graph.data.frame(Impedance[,1:2], directed=FALSE)
gbase <- graph_from_data_frame(Impedance[,1:3], directed=FALSE)
test <- Cascade(gbase, trans1, trans2)
(max(components(test)$csize)/vcount(gbase)) > 0.8
test %>%
simplify(., remove.multiple = T, remove.loops = T) %>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA)
NodeDeleteFunction <- quo(sample(V(gCasc)$name, 1))
eval_tidy(NodeDeleteFunction)
NodeDeleteFunction <- quo(sample(V(gbase)$name, 1))
eval_tidy(NodeDeleteFunction)
eval_tidy(NodeDeleteFunction)
eval_tidy(NodeDeleteFunction)
eval_tidy(NodeDeleteFunction)
eval_tidy(NodeDeleteFunction)
NodeDeleteFunction <-sample(V(gbase)$name, 1) %>% quo
eval_tidy(NodeDeleteFunction)
sample(V(gbase)$name, 1) %>% quo
NodeDeleteFunction <-quo(sample(V(gbase)$name, 1))
eval_tidy(NodeDeleteFunction)
Cascade(gCasc, trans1, trans2)
gCasc <- delete.vertices(gCasc, deletevertex)
gCasc <- delete.vertices(g, deletevertex)
AttackStrategy <- NodeDeleteFunction
g <- gbase
deletevertex <- eval_tidy(AttackStrategy)
gCasc <- delete.vertices(g, deletevertex)
Cascade(gCasc, trans1, trans2)
AttackGrid <- function(g, AttackStrategy, referenceGrid = NULL){
if(is.null(referenceGrid)){
referenceGrid  <- g
}
deletevertex <- eval_tidy(AttackStrategy)
#remove selected node from network
gCasc <- delete.vertices(g, deletevertex)
gCasc <- Cascade(gCasc, trans1, trans2)
if((max(components(gCasc)$csize)/vcount(referenceGrid)) > 0.8){
gCasc <- AttackGrid(gCasc, AttackStrategy, referenceGrid)
}
return(gCasc)
}
RandomAttack <-quo(sample(V(g)$name, 1))
test <- AttackGrid(gbase, RandomAttack)
RandomAttack <-quo(sample(V(g)$name, 1))
AttackGrid <- function(g, AttackStrategy, SubstationData, EdgeData, referenceGrid = NULL){
if(is.null(referenceGrid)){
referenceGrid  <- g
}
deletevertex <- eval_tidy(AttackStrategy)
#remove selected node from network
gCasc <- delete.vertices(g, deletevertex)
gCasc <- Cascade(gCasc, SubstationData, EdgeData)
if((max(components(gCasc)$csize)/vcount(referenceGrid)) > 0.8){
gCasc <- AttackGrid(gCasc, AttackStrategy, SubstationData, EdgeData, referenceGrid)
}
return(gCasc)
}
test <- AttackGrid(gbase, trans1, trans2 RandomAttack)
test <- AttackGrid(gbase, trans1, trans2, RandomAttack)
test <- AttackGrid(gbase, RandomAttack, trans1, trans2)
AttackGrid <- function(g, AttackStrategy, SubstationData, EdgeData, referenceGrid = NULL, MinMaxComp = 0.8){
#This function attacks the grid using a given attack strategy
#g: Network as an igraph object
#AttackStrategy: A function that calculates which node to delete the function is is in "quo" form
#SubstationData: Dataframe that contains data on the susbtations
#EdgeData: Data frame of Edge data for the network.
#referenceGrid: the grid that will be used to test the largest component against if NULL it uses the given network
#MinMaxComp: The minimum size of the maximum component for the process to continue
if(is.null(referenceGrid)){
referenceGrid  <- g
}
deletevertex <- eval_tidy(AttackStrategy)
#remove selected node from network
gCasc <- delete.vertices(g, deletevertex)
gCasc <- Cascade(gCasc, SubstationData, EdgeData)
if((max(components(gCasc)$csize)/vcount(referenceGrid)) > MinMaxComp){
gCasc <- AttackGrid(gCasc, AttackStrategy, SubstationData, EdgeData, referenceGrid)
}
return(gCasc)
}
test <- AttackGrid(gbase, RandomAttack, trans1, trans2)
Cascade <- function(g, SubstationData, EdgeData, Iteration = 0){
#This Function iterates through the network removing edges until there are no further overpower edges to remove
#This function takes a weighted edge list, the substation data on demand and generation as well as the current network
#This function uses the Bus order to choose the slack reference should this be changed?
#It returns the a weighted Edge list of the remaining valid edges.
#g: a weighted graph where the edges are the impedance
#SubstationData: a dataframe containin Node name, generation and demand.
#EdgeData: A dataframe containing Bus.1 and Bus.2 as well as Link limit
#Iteration: the number of iteration number of the cascade, used to keep track of what is going on
Iteration <- Iteration + 1
print(paste("Iteration number", Iteration))
#Create the edge list from the graph object
ImpedanceCasc <- as_data_frame(g) %>%
rename(Bus.1 = from, Bus.2 = to) %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup %>%
mutate(Y = round(Y,7)) %>%
select(Bus.1, Bus.2, Link, Y) %>%
arrange(Link)
#checks that only inlcuded nodes are being counted removes nodes that shouldn't be there.
#Using the graph vertex name instead of the edge list means that isolated nodes are included as their own component.
ValidNodesCasc <- SubstationData %>%
filter(Bus.Name %in% V(g)$name)
#matches each node to it's network componan
componentmatcher <- data_frame(Bus.Name = names(components(g)$membership),
component = components(g)$membership)
#adds componants to the valid node data frame so that each section can be individually balanced
ValidNodesCasc <-ValidNodesCasc %>% left_join(componentmatcher, by = "Bus.Name")
#Identify DeadIslands and balences load
ValidNodesCasc <-  BalencedGenDem2(g,
ValidNodesCasc,
Demand, Generation.B.....Year.Round...Transport.Model.,
"BusTransferB")
#Remove dead islands
DeadIslandNodes <- ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland]
ImpedanceCasc <- ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ValidNodesCasc <- ValidNodesCasc %>%
filter(!DeadIsland)
#finds the slack reference in each component
#Only components that are greater than 1 node need to be included as all 1 node components
#can never exceed there line limit as not lines are used.
SlackRefCasc <- ValidNodesCasc %>%
group_by(component) %>%
arrange(Bus.Order) %>%
summarise(Bus.Name = first(Bus.Name),
Nodes = n()) %>%
filter(Nodes>1)
#Add on the componant information for the nodes in the Impedance edge list, this allows the power flow to be calculated
#by component
ImpedanceCasc <- ImpedanceCasc %>%
left_join(componentmatcher, by = c("Bus.1"="Bus.Name"))
#Calculate power flow for each component of the network as seperate networks
PowerFlowMat <- 1:nrow(SlackRefCasc) %>%
map_df(~{
print(paste("PowerFlow for componant", .x, "of Iteration", Iteration))
ImpedanceMap <- ImpedanceCasc %>%
filter(component == SlackRefCasc$component[.x]) %>%
select(-component)
ValidNodesMap <- ValidNodesCasc %>%
filter(component == SlackRefCasc$component[.x])
PowerFlow(ImpedanceMap, ValidNodesMap, SlackRefCasc[.x,])
})
#Join up Power flow with line limit data to know which lines are overlimit and will be shut down
PowerFlowMat2 <- EdgeData %>%
select( Link, Link.Limit, Link.Type, LineFlow__1 )%>%
left_join(PowerFlowMat, ., by = "Link") %>%
mutate(Over.Limit = abs(MW)>Link.Limit,
Over.Limitx1.5 = abs(MW)>(Link.Limit*1.5)) %>%
mutate(MW = round(MW),
LineFlow__1= round(LineFlow__1),
ratio = MW/LineFlow__1,
diff  = MW-LineFlow__1,
absdiff = abs(diff))
#These links are stil safe and can be kept and turn the new Impedance edge matrix back into a graph
#Using the valid nodes
g2 <- PowerFlowMat2 %>%
filter(!Over.Limit) %>%
select(Link) %>%
left_join(ImpedanceCasc, by = "Link") %>%
select(-Link, -component) %>%
graph_from_data_frame(., directed=FALSE, vertices=select(ValidNodesCasc, Bus.Name))
#checks the initial network and the final network are equal.
#If they are not equal then a vector of each element of the graph object is returned, showing which
#parts are equal and which are not. If the vector is longer than 1 then it they are not equal
#If the list is only 1 long and is FALSE then it is also FALSE
edgesequal <- all_equal(get.edgelist(g), get.edgelist(g2))
CascadeContinues <- !((edgesequal==TRUE)[1] & length(edgesequal)==1)
if(CascadeContinues){
g2 <- Cascade(g2, SubstationData, EdgeData, Iteration)
}
print("Cascade has finished")
return(g2)
}
test <- AttackGrid(gbase, RandomAttack, trans1, trans2)
AttackTheGrid <- function(g, AttackStrategy, SubstationData, EdgeData, referenceGrid = NULL, MinMaxComp = 0.8){
#This function attacks the grid using a given attack strategy
#g: Network as an igraph object
#AttackStrategy: A function that calculates which node to delete the function is is in "quo" form
#SubstationData: Dataframe that contains data on the susbtations
#EdgeData: Data frame of Edge data for the network.
#referenceGrid: the grid that will be used to test the largest component against if NULL it uses the given network
#MinMaxComp: The minimum size of the maximum component for the process to continue
if(is.null(referenceGrid)){
referenceGrid  <- g
}
deletevertex <- eval_tidy(AttackStrategy)
#remove selected node from network
gCasc <- delete.vertices(g, deletevertex)
gCasc <- Cascade(gCasc, SubstationData, EdgeData)
#If the largest componant is larger than the MinMaxComp threshold
#call the function again and delete a new node.
if((max(components(gCasc)$csize)/vcount(referenceGrid)) > MinMaxComp){
gCasc <- AttackTheGrid(gCasc, AttackStrategy, SubstationData, EdgeData, referenceGrid)
}
return(gCasc)
}
test <- AttackTheGrid(gbase, RandomAttack, trans1, trans2)
View(Cascade)
