#they arethe same length until you join them together then they become much longer.. why?
left_join(., select(Impedance, Link, Y), by = "Link")
V(gCasc)
ValidNodesCasc <- ValidNodesFunc(trans1, ImpedanceCasc) %>%
BalencedGenDem2(gCasc, .)
DeadIslandNodes <-ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland]
ImpedanceCasc <- ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ValidNodesCasc <- ValidNodesCasc %>%
filter(!DeadIsland)
SlackRefCasc <- which.min(ValidNodesCasc$Bus.Order)
PowerFlowMat <- PowerFlow(ImpedanceCasc, ValidNodesCasc, SlackRefCasc)
Impedance <- ImpedanceCasc
ValidNodes <- ValidNodesCasc
SlackRef <- SlackRefCasc
AZero <-  Impedance %>%
CreateTransmission(., "Bus.1", "Bus.2")
A <- AZero[,colnames(AZero)!=ValidNodes$Bus.Name[SlackRef]]
C <- LinePropertiesMatrix(Impedance, "Bus.1", "Bus.2")
C<-C[match(rownames(A),rownames(C)), match(rownames(A),rownames(C))]
B <- t(A) %*% C %*% A
InjectionVector <- ValidNodes$BusTransferB[match(colnames(A), ValidNodes$Bus.Name)]
PowerAlt <- C %*% A %*% solve(B, InjectionVector)
PowerAlt<- data.frame(Link = rownames(PowerAlt), MW = PowerAlt[,1])
View(PowerAlt)
PowerAlt <- C %*% A %*% solve(B, InjectionVector)
View(C)
View(B)
View(A)
B <- t(A) %*% C %*% A
dim(A)
dim(C)
sum(is.na(C))
sum(is.na(A))
sum(is.na(ImpedanceCasc))
View(Impedance)
Impedance <- trans2 %>%
mutate(Y = 1/X..Peak.Security.) %>%
select(Bus.1, Bus.2, Y, Link)
sum(is.na(ImpedanceCasc))
trans2 <- TransportData[,17:59] %>%
filter(!is.na(Bus.1)) %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup  %>%
#set construct line limits really high
mutate(Link.Type = tolower(Link.Type),
Link.Limit = ifelse(Link.Type == "construct", 1e5, Link.Limit))
Impedance <- trans2 %>%
mutate(Y = 1/X..Peak.Security.) %>%
select(Bus.1, Bus.2, Y, Link)
sum(is.na(Impedance))
gCasc <- gbase
gCasc <- set_edge_attr(gCasc, "weight", index = E(gCasc), 1 )
set.seed(193) #makes testing reproducible
deletevertex <- sample(V(gCasc)$name, 1)
gCasc <- delete.vertices(gCasc, deletevertex)
ecount(gCasc) #just to check there are less edges, can be deleted later
ImpedanceCasc<- as_tibble(get.edgelist(gCasc)) %>%
#mutate(Y = edge_attr(gCasc, "weight")) %>%
rename(Bus.1 = V1, Bus.2 = V2) %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup %>%
#they arethe same length until you join them together then they become much longer.. why?
left_join(., select(Impedance, Link, Y), by = "Link")
sum(is.na(Impedance))
sum(is.na(ImpedanceCasc))
View(ImpedanceCasc)
Impedance %>% filter(Bus.1 == "PERS10")
ImpedanceCasc<- as_tibble(get.edgelist(gCasc)) %>%
#mutate(Y = edge_attr(gCasc, "weight")) %>%
rename(Bus.1 = V1, Bus.2 = V2)
ImpedanceCasc %>% filter(Bus.1 == "PERS10")
gbase <- graph.data.frame(Impedance[,1:2], directed=FALSE)
get.edgelist(gbase)
get.edgelist(gbase) %>% as.tibble()
get.edgelist(gbase) %>% as.tibble %>% filter(V1 == "PERS10")
Impedance %>% as.tibble %>% filter(V1 == "PERS10")
Impedance %>% as.tibble %>% filter(Bus.1 == "PERS10")
gbase2 <- graph_from_edgelist(Impedance[,1:2], directed = TRUE)
gbase2 <- Impedance[,1:2] %>%
as.matrix %>%
graph_from_edgelist( directed = TRUE)
get.edgelist(gbase) %>% as.tibble %>% filter(V1 == "PERS10")
get.edgelist(gbase2) %>% as.tibble %>% filter(V1 == "PERS10")
as_data_frame(gabse)
as_data_frame(gbase)
as_data_frame(gbase) %>% head
as_data_frame(gbase) %>% %>% filter(from == "PERS10")
as_data_frame(gbase) %>% filter(from == "PERS10")
as_data_frame(gbase) %>% filter(from == "PERS10")
get.edgelist(gbase) %>% as.tibble %>% filter(V1 == "PERS10")
get.edgelist(gbase2) %>% as.tibble %>% filter(V1 == "PERS10")
gbase2 <- Impedance[,1:2] %>%
as.matrix %>%
graph_from_edgelist( directed = TRUE)
get.edgelist(gbase2) %>% as.tibble %>% filter(V1 == "PERS10")
gbase <- Impedance[,1:2] %>%
as.matrix %>%
graph_from_edgelist( directed = TRUE)
get.edgelist(gbase) %>% as.tibble %>% filter(V1 == "PERS10")
as_data_frame(gbase) %>% filter(from == "PERS10")
get.edgelist(gbase2) %>% as.tibble %>% filter(V1 == "PERS10")
AZero <-  Impedance %>%
CreateTransmission(., "Bus.1", "Bus.2")
A <- AZero[,colnames(AZero)!=trans1$Bus.Name[SlackRef]]
C <- LinePropertiesMatrix(Impedance, "Bus.1", "Bus.2")
B <- t(A) %*% C %*% A
---
title: "Untitled"
author: "Jonathan Bourne"
date: "1 August 2017"
output: html_document
---
#Setup Chunk
```{r}
setwd("/home/jonno/Create_ETYS_network/SubCode")
source("Setup.R")
```
#Load Tariff and Trasnport
```{r}
KeepPath <- getwd()
#Load Tariff aka generation data
setwd(Tariff)
GenerationData <- read_excel("Tariff & Transport Model_2018_19 Tariffs_External.xlsm", sheet =10, skip = 33) %>%
setNames(make.names(names(.))) %>%
mutate(Site = str_sub(Node.1,1,4))
LocalAssetData <- read_excel("Tariff & Transport Model_2018_19 Tariffs_External.xlsm", sheet =11, skip = 11) %>%
setNames(make.names(names(.)))
TransportData <- read_excel("Tariff & Transport Model_2018_19 Tariffs_External.xlsm", sheet =12, skip = 11) %>%
setNames(make.names(names(.)))
setwd(KeepPath)
rm(KeepPath)
```
#Clean and seperate Transport
```{r}
trans1 <-TransportData[,1:16] %>%
filter(!is.na(Bus.ID))
trans2 <- TransportData[,17:59] %>%
filter(!is.na(Bus.1)) %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup  %>%
#set construct line limits really high
mutate(Link.Type = tolower(Link.Type),
Link.Limit = ifelse(Link.Type == "construct", 1e5, Link.Limit))
```
```{r}
NodeGraph <-trans2 %>%
mutate(Node1 = Bus.1,
Node2 = Bus.2) %>%
select(Node1, Node2) %>%
as.matrix() %>%
graph_from_edgelist(., directed = FALSE)
NodeGraph %>%
simplify(., remove.multiple = T, remove.loops = T) %>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA)
length(V(SubStatGraph2))
```
#Injection Vector
```{r}
InjectionVector <- trans1 %>% arrange(Bus.Name) %>% .$BusTransferB
```
#Create Impedance and Transmission matrix
parallel susceptances are added together. does this mean that when there are multiple lines connecting two nodes they should be added together and have the total capacity added together or should they be help seperate?
the removing of parallel cables may be causing some of the over capacity lines
```{r}
Impedance <- trans2 %>%
mutate(Y = 1/X..Peak.Security.) %>%
select(Bus.1, Bus.2, Y, Link)
```
#Alternative calc
```{r}
#checks that only inlcuded nodes are being counted
ValidNodes <- trans1 %>%
filter(Bus.Name %in% c(Impedance$Bus.1, Impedance$Bus.2))
#remove Slack bus, usually the largest generator
SlackRef<-which.max(ValidNodes$BusTransferA)
SlackRef<- which(ValidNodes$Bus.Order == 0)
PowerAlt <- PowerFlow(Impedance, ValidNodes, SlackRef)
PowerAlt2 <- trans2 %>%
select( Link, Link.Limit, Link.Type, LineFlow__1 )%>%
left_join(PowerAlt, ., by = "Link") %>%
mutate(Over.Limit = abs(MW)>Link.Limit,
Over.Limitx1.5 = abs(MW)>(Link.Limit*1.5)) %>%
mutate(MW = round(MW),
LineFlow__1= round(LineFlow__1),
ratio = MW/LineFlow__1,
diff  = MW-LineFlow__1,
absdiff = abs(diff))
#corellation is strong enough, I am not going to focus on higher matching atm
cor(PowerAlt2$MW, PowerAlt2$LineFlow__1)
```
#Voltage Matching
Everyone matches to the same voltage unless it is a transformer.
There is an excpetion three types called construct also have different volatges, these could be also transformers under construction... this should be tested.
colours
green<- Transformer
orange <- 132
purple <- 275
Pink <- 400
```{r}
Vmatch <- trans1 %>% select(Bus.Name, Voltage)
Vnet <- trans2 %>%
select(Bus.1, Bus.2, Link.Type, Link) %>%
left_join(., Vmatch, by = c("Bus.1"="Bus.Name")) %>%
rename(Voltage.1 = Voltage) %>%
left_join(., Vmatch, by = c("Bus.2"="Bus.Name")) %>%
rename(Voltage.2 = Voltage) %>%
mutate(Link.Voltage = as.factor(ifelse(Voltage.1 == Voltage.2, Voltage.1, 0)))
VoltCols <-  with(Vnet,
data.frame(Link.Voltage = levels(Link.Voltage),
color = I(brewer.pal(nlevels(Link.Voltage), name = 'Dark2'))))
Vne%>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup t <-   VoltCols %>%
left_join(Vnet,.)
Vnet2 <- Vnet %>% filter(Voltage.1 != Voltage.2)
g <- graph.data.frame(Vnet[,1:2], vertices=Vmatch, directed=FALSE) #%>%
# simplify(., remove.multiple = T, remove.loops = T)
#V(g)$color <- V(g)$Voltage
#plot(g,vertex.size=5, edge.arrow.size=.4, vertex.label = NA)
E(g)$color<-Vnet$color
#Network colouored by voltage
set.seed(1530)
plot(g,vertex.size=1, edge.arrow.size=1, vertex.label = NA, main = "Grid by Link Voltage")
g <- delete_edges(g, (1:nrow(Vnet))[Vnet$Link.Voltage == 0] )
set.seed(1530)
plot(g,vertex.size=1, edge.arrow.size=1, vertex.label = NA, main = "Network of similar voltages")
#OverCapcity using my calcs
g <- graph.data.frame(Vnet[,1:2], vertices=Vmatch, directed=FALSE)
E(g)$color<-ifelse(PowerAlt2$Over.Limit, "red", "blue")
set.seed(1530)
plot(g,vertex.size=1, edge.arrow.size=1, vertex.label = NA, main = "Over Capacity My calc")
#Over Capacity Using grid calcs
E(g)$color<-ifelse(PowerAlt2$Over.Limit, "red", "blue")
set.seed(1530)
plot(g,vertex.size=1, edge.arrow.size=1, vertex.label = NA, main = "Over Capacity My calc")
#Amount of power flow
E(g)$color<- with(PowerAlt2,
data.frame(levels = 10:1,
color = I(brewer.pal(10, name = 'RdYlBu'))))$color[ntile(PowerAlt2$MW, 10)]
set.seed(1530)
plot(g,vertex.size=0.5, edge.arrow.size=10, vertex.label = NA, main = "Mw deciles, Blue=low, Red=High")
```
```{r}
Volt.colours <- data.frame(Link.Voltage = unique(Vnet$Link.Voltage), Vcolour= brewer.pal(4, "Set1"))
g2 <- Vnet %>%
select(Bus.1, Bus.2, Link.Voltage) %>%
left_join(., Volt.colours)
set.seed(10052016)
ggplot(data = g2, aes(from_id = Bus.1, to_id = Bus.2)) +
geom_net( layout.alg = "kamadakawai",
size = 2, labelon = FALSE, vjust = -0.6, ecolour = g2$Vcolour,
directed =FALSE, fontsize = 3, ealpha = 0.5) +
xlim(c(-0.05, 1.05)) +
theme_net() +
theme(legend.position = "bottom")
```
Graph Stats
```{r}
NetworkStats <- function(g, colname = "value"){
data_frame(Metric = c("Nodes", "edges", "Components" ,"betweenness", "degree", "assortativity", "clustering", "distance"),
value = c(vcount(g), ecount(g), components(g)$no, mean(betweenness(g)),mean(degree(g)), assortativity(g, degree(g)),
transitivity(g), 1)
) %>% setNames(c("Metric", colname))
#This takes forever maybe should replace with *distances* or something else? and custome electrical distance function
#  mean( ifelse(is.finite(shortest.paths(g)),shortest.paths(g), NA), na.rm = T)
}
test <-ifelse(is.finite(shortest.paths(gImp2)),shortest.paths(gImp2), NA)
mean(test, na.rm = T)
```
```{r}
gbase <- graph.data.frame(Impedance[,1:2], directed=FALSE)
gbase <- Impedance[,1:2] %>%
as.matrix %>%
graph_from_edgelist( directed = TRUE)
get.edgelist(gbase) %>% as.tibble %>% filter(V1 == "PERS10")
as_data_frame(gbase) %>% filter(from == "PERS10")
get.edgelist(gbase2) %>% as.tibble %>% filter(V1 == "PERS10")
AZero <-  Impedance %>%
CreateTransmission(., "Bus.1", "Bus.2")
# #remove Slack bus, usually the largest generator
# SlackRef<-which.max(ValidNodes$BusTransferA)
A <- AZero[,colnames(AZero)!=trans1$Bus.Name[SlackRef]]
#Vreate the diagonal matrix of
C <- LinePropertiesMatrix(Impedance, "Bus.1", "Bus.2")
B <- t(A) %*% C %*% A
ecount(gbasemean( ifelse(is.finite(shortest.paths(g)),shortest.paths(g), NA), rm.na =T))
B2 <- solve(B)
diag(B2)<-0
min(B2);max(B2)
Bvect <-unlist(B2)
gImp <- B2 %>% graph.adjacency(., mode="undirected", weighted=TRUE)
ecount(gImp)
min(E(gImp)$weight);max(E(gImp)$weight)
sum(E(gImp)$weight>2)
#Takes ages to calculate tells you where to cut off the edges.
# Edgedf <- data_frame(cutoff = seq(min(E(gImp)$weight), max(E(gImp)$weight), by = 1/100)) %>%
#   mutate(index = 1:n(),
#          Edges = cutoff %>%
#   map_dbl(~ sum(E(gImp)$weight>.x))
# )
RemoveEdges <- data_frame(valid = E(gImp)$weight > 3.733029) %>%
mutate(index = 1:n()) %>%
filter(valid == FALSE)
table(RemoveEdges$valid)
gImp2 <- gImp
gImp2 <- delete_edges(gImp, RemoveEdges$index)
plot(gImp2,vertex.size=1, edge.arrow.size=1, vertex.label = NA)
#keep just non isolated nodes
iso <- V(gImp2)[degree(gImp2)==0]
g2 <- delete.vertices(gImp2, iso)
gX <- Impedance %>%
graph.data.frame(., directed=FALSE)
DiffNetStats <- left_join(NetworkStats(gbase, "Topological"), NetworkStats(gImp2, "Impedance"), by= "Metric") %>%
left_join(., NetworkStats(gX, "Reactance"), by= "Metric") %>%
mutate_if(.,is.numeric, funs(format(round(.,3), scientific=F)) )
test <- distances(gbase)
test <- distances(gImp, weights = "Y")
```
#Simple Cascade
first try is to make a cascade of random failure until super componant collapses
```{r}
#input networkas_adjacency_matrix(Impmat, attr = "weight")
gCasc <- gbase
#set an ImpedanceCascedge weight of 1
gCasc <- set_edge_attr(gCasc, "weight", index = E(gCasc), 1 )
#node to delete rule
set.seed(193) #makes testing reproducible
deletevertex <- sample(V(gCasc)$name, 1)
#remove selected node from network
gCasc <- delete.vertices(gCasc, deletevertex)
#convert network to matrix
ecount(gCasc) #just to check there are less edges, can be deleted later
#Why is this longer than the original? is it because of multi links?
ImpedanceCasc<- as_tibble(get.edgelist(gCasc)) %>%
#mutate(Y = edge_attr(gCasc, "weight")) %>%
rename(Bus.1 = V1, Bus.2 = V2) %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup %>%
#they arethe same length until you join them together then they become much longer.. why?
left_join(., select(Impedance, Link, Y), by = "Link")
V(gCasc)
#checks that only inlcuded nodes are being counted removes nodes that shouldn't be there.
#follows up by balancing demand and gen
ValidNodesCasc <- ValidNodesFunc(trans1, ImpedanceCasc) %>%
BalencedGenDem2(gCasc, .)
gCasc <- gbase
gCasc <- set_edge_attr(gCasc, "weight", index = E(gCasc), 1 )
set.seed(193) #makes testing reproducible
deletevertex <- sample(V(gCasc)$name, 1)
t
ecount(gCasc) #just to check there are less edges, can be deleted later
gCasc <- delete.vertices(gCasc, deletevertex)
Casc <- gbase
#set an ImpedanceCascedge weight of 1
gCasc <- set_edge_attr(gCasc, "weight", index = E(gCasc), 1 )
#node to delete rule
set.seed(193) #makes testing reproducible
deletevertex <- sample(V(gCasc)$name, 1)
#remove selected node from network
gCasc <- delete.vertices(gCasc, deletevertex)
#convert network to matrix
ecount(gCasc) #just to check there are less edges, can be deleted later
ImpedanceCasc<- as_tibble(get.edgelist(gCasc)) %>%
#mutate(Y = edge_attr(gCasc, "weight")) %>%
rename(Bus.1 = V1, Bus.2 = V2) %>%
group_by(Bus.1, Bus.2) %>% #trying to stop the non-unique identifier problem
mutate(Link = paste(Bus.1,Bus.2, 1:n(),sep = "-")) %>% #This allows multiple edges
#between the same node pair, it is not certain the data is always correct!
ungroup %>%
#they arethe same length until you join them together then they become much longer.. why?
left_join(., select(Impedance, Link, Y), by = "Link")
View(ImpedanceCasc)
V(gCasc)
ValidNodesCasc <- ValidNodesFunc(trans1, ImpedanceCasc) %>%
BalencedGenDem2(gCasc, .)
ValidNodesCasc <- ValidNodesFunc(trans1, ImpedanceCasc)
View(ValidNodesCasc)
ValidNodesCasc <- ValidNodesFunc(trans1, ImpedanceCasc) %>%
BalencedGenDem2(gCasc, .)
ValidNodesCasc <- ValidNodesFunc(trans1, ImpedanceCasc)
ValidNodes <-ValidNodesCasc
componentmatcher <- data_frame(Bus.Name = names(components(g)$membership),
component = components(g)$membership)
g <- gCasc
componentmatcher <- data_frame(Bus.Name = names(components(g)$membership),
component = components(g)$membership)
names(components(g)
)
g
?components()
componentmatcher <- data_frame(Bus.Name = names(igraph::components(g)$membership),
component = igraph::components(g)$membership)
ValidNodesCasc <- ValidNodes %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = if_else(DeadIsland, 0, Generation.B.....Year.Round...Transport.Model.)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand2)>sum(Generation.B2),
Demand2 = ifelse(GenBal,
Demand2*(sum(Generation.B2)/sum(Demand2)), Demand2),
Generation.B2 = ifelse(GenBal,
Generation.B2*(sum(Demand2)/sum(Generation.B2)), Generation.B2),
BusTransferB = Demand2 + Generation.B2) %>%
ungroup
ValidNodesCasc <- ValidNodesFunc(trans1, ImpedanceCasc) %>%
BalencedGenDem2(gCasc, .)
BalencedGenDem2 <- function(g, ValidNodes){
#Balences the generation and demand across multiple isolated componants
#g: the graph of the network that is being attacked
#ValidNodes: the data frame of valid nodes and there demand and generation
componentmatcher <- data_frame(Bus.Name = names(igraph::components(g)$membership),
component = igraph::components(g)$membership)
ValidNodesCasc <- ValidNodes %>%
left_join(componentmatcher, by = "Bus.Name") %>%
group_by(component) %>%
#remove Dead islands
mutate(DeadIsland = sum(Demand)==0 | sum(Generation.B.....Year.Round...Transport.Model.)==0,
Demand2 = ifelse(DeadIsland, 0, Demand),
Generation.B2 = if_else(DeadIsland, 0, Generation.B.....Year.Round...Transport.Model.)) %>%
#rebalence remaining componants
mutate(GenBal = sum(Demand2)>sum(Generation.B2),
Demand2 = ifelse(GenBal,
Demand2*(sum(Generation.B2)/sum(Demand2)), Demand2),
Generation.B2 = ifelse(GenBal,
Generation.B2*(sum(Demand2)/sum(Generation.B2)), Generation.B2),
BusTransferB = Demand2 + Generation.B2) %>%
ungroup
}
ValidNodesCasc <- ValidNodesFunc(trans1, ImpedanceCasc) %>%
BalencedGenDem2(gCasc, .)
DeadIslandNodes <-ValidNodesCasc$Bus.Name[ValidNodesCasc$DeadIsland]
ImpedanceCasc <- ImpedanceCasc %>%
filter(!(Bus.1 %in% DeadIslandNodes) | !(Bus.2 %in% DeadIslandNodes)  )
ValidNodesCasc <- ValidNodesCasc %>%
filter(!DeadIsland)
SlackRefCasc <- which.min(ValidNodesCasc$Bus.Order)
PowerFlowMat <- PowerFlow(ImpedanceCasc, ValidNodesCasc, SlackRefCasc)
PowerFlowMat2 <- trans2 %>%
select( Link, Link.Limit, Link.Type, LineFlow__1 )%>%
left_join(PowerFlowMat, ., by = "Link") %>%
mutate(Over.Limit = abs(MW)>Link.Limit,
Over.Limitx1.5 = abs(MW)>(Link.Limit*1.5)) %>%
mutate(MW = round(MW),
LineFlow__1= round(LineFlow__1),
ratio = MW/LineFlow__1,
diff  = MW-LineFlow__1,
absdiff = abs(diff))
View(PowerFlowMat)
PowerFlowMat <- PowerFlow(ImpedanceCasc, ValidNodesCasc, SlackRefCasc)
PowerFlowMat2 <- trans2 %>%
select( Link, Link.Limit, Link.Type, LineFlow__1 )%>%
left_join(PowerFlowMat, ., by = "Link") %>%
mutate(Over.Limit = abs(MW)>Link.Limit,
Over.Limitx1.5 = abs(MW)>(Link.Limit*1.5)) %>%
mutate(MW = round(MW),
LineFlow__1= round(LineFlow__1),
ratio = MW/LineFlow__1,
diff  = MW-LineFlow__1,
absdiff = abs(diff))
View(PowerFlowMat2)
InjectionVector <- trans1 %>% arrange(Bus.Name) %>% .$BusTransferB
```
#Create Impedance and Transmission matrix
parallel susceptances are added together. does this mean that when there are multiple lines connecting two nodes they should be added together and have the total capacity added together or should they be help seperate?
the removing of parallel cables may be causing some of the over capacity lines
```{r}
Impedance <- trans2 %>%
mutate(Y = 1/X..Peak.Security.) %>%
select(Bus.1, Bus.2, Y, Link)
```
#Alternative calc
```{r}
#checks that only inlcuded nodes are being counted
ValidNodes <- trans1 %>%
filter(Bus.Name %in% c(Impedance$Bus.1, Impedance$Bus.2))
#remove Slack bus, usually the largest generator
SlackRef<-which.max(ValidNodes$BusTransferA)
SlackRef<- which(ValidNodes$Bus.Order == 0)
PowerAlt <- PowerFlow(Impedance, ValidNodes, SlackRef)
PowerAlt2 <- trans2 %>%
select( Link, Link.Limit, Link.Type, LineFlow__1 )%>%
left_join(PowerAlt, ., by = "Link") %>%
mutate(Over.Limit = abs(MW)>Link.Limit,
Over.Limitx1.5 = abs(MW)>(Link.Limit*1.5)) %>%
mutate(MW = round(MW),
LineFlow__1= round(LineFlow__1),
ratio = MW/LineFlow__1,
diff  = MW-LineFlow__1,
absdiff = abs(diff))
View(PowerFlowMat2)
